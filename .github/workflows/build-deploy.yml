    name: Build and Deploy URL Shortener

    on:
      push:
        branches:
          - main
      pull_request:
        branches:
          - main

    env:
      AWS_REGION: us-east-1 # Change to your desired AWS region

    jobs:
      build-and-deploy:
        runs-on: ubuntu-latest
        environment: development # Or a more specific environment if you have one configured

        steps:
          - name: Checkout code
            uses: actions/checkout@v3
            with:
              fetch-depth: 0 # Fetch all history for terraform

          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: '3.9' # Or your desired Python version

          - name: Install Python dependencies
            run: |
              python -m pip install --upgrade pip
              pip install -r app/requirements.txt
              pip install flake8 # Install flake8 for linting
      
          - name: Run Flake8 Lint Check
            run: |
              flake8 app/ # Run flake8 on the app directory

                    - name: Package Lambda Functions
            run: |
              # Create a 'build' directory at the root for the final zip files
              mkdir -p build

              # --- Package create_link Lambda ---
              # Create a temporary 'package' directory for its contents (dependencies + handler)
              mkdir -p package_create_link_temp

              # Install dependencies from app/requirements.txt into the temporary directory
              pip install -r app/requirements.txt --target package_create_link_temp

              # Copy the Lambda handler file into the temporary directory
              cp app/create_link.py package_create_link_temp/

              # Navigate into the temporary directory, zip its contents, then move the zip to 'build'
              cd package_create_link_temp
              zip -r ../build/create_link.zip .
              cd ..

              # Clean up the temporary directory
              rm -rf package_create_link_temp

              # --- Package redirect Lambda ---
              # Create a temporary 'package' directory for its contents (dependencies + handler)
              mkdir -p package_redirect_temp

              # Install dependencies from app/requirements.txt into the temporary directory
              pip install -r app/requirements.txt --target package_redirect_temp

              # Copy the Lambda handler file into the temporary directory
              cp app/redirect.py package_redirect_temp/

              # Navigate into the temporary directory, zip its contents, then move the zip to 'build'
              cd package_redirect_temp
              zip -r ../build/redirect.zip .
              cd ..

              # Clean up the temporary directory
              rm -rf package_redirect_temp

    # Ensure the indentation for the next step, 'Set up Terraform', remains correct.
    

          - name: Set up Terraform
            uses: hashicorp/setup-terraform@v2
            with:
              terraform_version: 1.5.0 # Specify a recent, stable Terraform version

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Terraform Init
            run: terraform init

          - name: Terraform Validate
            run: terraform validate

          - name: Terraform Plan
            run: terraform plan -out=tfplan

          - name: Terraform Apply
            run: terraform apply --auto-approve tfplan

          # Outputs are not directly visible in GitHub Actions Summary without additional steps
          # If you want to capture outputs, you'd add steps here to parse and display them.
    